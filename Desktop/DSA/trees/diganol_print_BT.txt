import java.util.*;

public class DSA {

    static class Node {
        Node left, right;
        int data;

        Node(int d) {
            data = d;
            left = null;
            right = null;
        }
    }

    static Scanner sc = new Scanner(System.in);

    public static Node tree() {
        Node node = null;
        int a = sc.nextInt();
        if (a == -1) return null;
        else node = new Node(a);
        node.left = tree();
        node.right = tree();
        return node;
    }

    static void print(Node node) {
        if (node == null) return;
        System.out.print(node.data + " ");
        print(node.left);
        print(node.right);
        return;
    }

    public static void main(String[] args) {
        Node t = tree();
        diagonalPrint(t);
    }

//    static void diagonalPrintUtil(Node root, int d,
//                                  TreeMap<Integer, ArrayList<Integer>> diagonalPrint) {
//
//        if (root == null)
//            return;
//
//        // get the list at the particular d value
//        ArrayList<Integer> k = diagonalPrint.get(d);
//
//        if (k == null) {
//            k = new ArrayList<>();
//            k.add(root.data);
//        }
//        else {
//            k.add(root.data);
//        }
//
//        // Store all nodes of same line
//        diagonalPrint.put(d, k);
//
//        // Increase the vertical distance
//        // if left child
//        diagonalPrintUtil(root.left,
//                d + 1, diagonalPrint);
//
//        // Vertical distance remains
//        // same for right child
//        diagonalPrintUtil(root.right,
//                d, diagonalPrint);

			////////////////// OR ////////////////

 if(root ==  null) return;
        diagonalPrint.putIfAbsent(d,new ArrayList<>());
        diagonalPrint.get(d).add(root.data);
        diagonalPrintUtil(root.left,d+1,diagonalPrint);
        diagonalPrintUtil(root.right,d,diagonalPrint);
        return;

//    }
//
//    // Print diagonal traversal
//    // of given binary tree
//    static void diagonalPrint(Node root) {
//
//        // create a map of vectors
//        // to store Diagonal elements
//        TreeMap<Integer, ArrayList<Integer>>
//                diagonalPrint = new TreeMap<>();
//        diagonalPrintUtil(root, 0, diagonalPrint);
//
//        System.out.println("Diagonal Traversal of Binary Tree");
//        for (Map.Entry<Integer, ArrayList<Integer>> entry :
//                diagonalPrint.entrySet()) {
//            System.out.println(entry.getValue());
//        }
//    }

    static class TNode
    {
        Node node;
        int level;
        public TNode(Node n, int l)
        {
            this.node = n;
            this.level = l;
        }
    }

    public static void diagonalPrint(Node root)
    {
        if (root == null)
        {
            return;
        }
        TreeMap<Integer,List<Integer>> map = new TreeMap<>();

        Queue<TNode> q = new LinkedList<TNode>();

        q.add(new TNode(root, 0));

        while (!q.isEmpty())
        {
            TNode curr = q.remove();
            map.putIfAbsent(curr.level, new ArrayList<>());
            map.get(curr.level).add(curr.node.data);

            if (curr.node.left != null)
            {
                q.add(new TNode(curr.node.left,
                        curr.level + 1));
            }
            if (curr.node.right != null)
            {
                q.add(new TNode(curr.node.right,
                        curr.level));
            }
        }

        for(Map.Entry<Integer, List<Integer>>
                entry : map.entrySet())
        {
            int k = entry.getKey();

            List<Integer> l = map.get(k);
            int size = l.size();

            for(int i = 0; i < l.size(); i++)
            {
                System.out.print(l.get(i));
                System.out.print(" ");
            }
            System.out.println("");
        }
        return;
    }

}