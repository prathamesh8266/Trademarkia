import java.util.*;

public class DSA {

    static class Node{
        Node left,right;
        int data;
        Node(int d){
            data = d;
            left = null;
            right = null;
        }
    }
    static Scanner sc = new Scanner(System.in);
    public static Node tree(){
        Node node = null;
        int a = sc.nextInt();
        if(a == -1) return null;
        else node = new Node(a);
        node.left = tree();
        node.right = tree();
        return node;
    }
    static void print(Node node){
        if(node == null) return;
        System.out.print(node.data+" ");
        print(node.left);
        print(node.right);
        return;
    }

    public static void main(String[] args){
        Node t = tree();
        f =1;
        isBalanced(t);
        if( f == 0) System.out.println("not-balanced");
        else System.out.println("balanced");
    }
    
    static int f = 1;
    static int isBalanced(Node node){
        if(node == null) return 0;

        int l = isBalanced(node.left);
        int r = isBalanced((node.right));
        if(Math.abs(l-r) > 1) f = 0;
        return Math.max(l,r)+1;
    }
    
    /////////////////////////////////////////////// O(n*n) approach

//    static boolean isBalanced(Node node){
//        if(node == null) return true;
//
//        if(isBalanced(node.left) == false){
//            return false;
//        }if(isBalanced(node.right) == false){
//            return false;
//        }
//        int left = height(node.left);
//        int right= height(node.right);
//        if(Math.abs(left-right) <= 1){
//            return true;
//        }else {
//            return false;
//        }
//    }
//    static int height(Node node){
//        if(node == null) return 1;
//
//        int l = height(node.left);
//        int r = height(node.right);
//        return Math.max(l,r)+1;
//    }

}
