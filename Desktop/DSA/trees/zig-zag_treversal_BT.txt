import java.util.*;
import java.util.logging.Level;

public class DSA {

    static class Node{
        Node left,right;
        int data;
        Node(int d){
            data = d;
            left = null;
            right = null;
        }
    }
    static Scanner sc = new Scanner(System.in);
    public static Node tree(){
        Node node = null;
//        System.out.println("Enter data");
        int a = sc.nextInt();
        if(a == -1) return null;
        else node = new Node(a);
//        System.out.println("Enter for left Node");
        node.left = tree();
//        System.out.println("Enter for right Node");
        node.right = tree();
        return node;
    }
    static void print(Node node){
        if(node == null) return;
        System.out.print(node.data+" ");
        print(node.left);
        print(node.right);
        return;
    }

    public static void main(String[] args){
        Node n = tree();
//        print(n);
//        System.out.println(topView(n));
            traverse(n);
            System.out.println(ar);
    }

    static ArrayList<Integer> ar = new ArrayList<>();
    static ArrayList<Integer> ar1 = new ArrayList<>();
    static Stack<Node> cur = new Stack<>();
    static Stack<Node> nxt = new Stack<>();

//    static ArrayList<Integer> zigZagTraversal(Node root){
//        traverse(root,0);
//        System.out.println(map);
//        return ar;
//    }

    static void traverse(Node node){
       cur.push(node);
        boolean l2r = true;
       while(!cur.isEmpty()){
           Node temp = cur.pop();
           ar.add(temp.data);
           if(l2r == true){
               if(temp.left!=null){
                   nxt.push(temp.left);
               }if(temp.right!=null){
                   nxt.push(temp.right);
               }
           }else {
               if(temp.right!=null){
                   nxt.push(temp.right
                   );
               }if(temp.left!=null){
                   nxt.push(temp.left);
               }
           }

           if(cur.isEmpty()){
               cur = nxt;
               nxt = new Stack<>();
               l2r = !l2r;
           }
       }
    }
}

