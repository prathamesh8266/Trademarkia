import java.lang.reflect.Array;
import java.util.*;

public class DSA {

    static class Node {
        Node left, right;
        int data;

        Node(int d) {
            data = d;
            left = null;
            right = null;
        }
    }

    static Scanner sc = new Scanner(System.in);

    public static Node tree() {
        Node node = null;
        int a = sc.nextInt();
        if (a == -1) return null;
        else node = new Node(a);
        node.left = tree();
        node.right = tree();
        return node;
    }

    static void print(Node node) {
        if (node == null) return;
        System.out.print(node.data + " ");
        print(node.left);
        print(node.right);
        return;
    }

    public static void main(String[] args) {
//        Node t = tree();
        s2T("4(2(3)(1))(6(5))");

    }
    static Stack<Character> c = new Stack<>();
    static Stack<Node> n = new Stack<>();
    static void s2T(String str){
        int i = 0;
        n.push(new Node(Character.getNumericValue(str.charAt(i))));
        i++;
        while (i < str.length()){
            Node temp = n.peek();
//            System.out.println("rng");
            if(str.charAt(i) == '('){
                c.push('(');i++;
            }if(str.charAt(i) == ')'){
                c.pop();
                n.pop();
                i++;
            }
            else{
                if(temp.left == null){
                    temp.left = new Node(Character.getNumericValue(str.charAt(i)));i++;
                    n.push(temp.left);
                }else{
                    temp.right = new Node(Character.getNumericValue(str.charAt(i)));i++;
                    n.push(temp.right);
                }
            }
        }
        print(n.peek());
    }
}