package DSA;	
import java.util.*;


class Node implements Comparator<Node>{
	int data,weight;
	Node(int d,int w){
		data = d;
		weight = w;
	}
	Node(){}
	@Override
	public int compare(Node o1, Node o2) {
		if(o1.weight<o2.weight)
			return -1;
		if(o1.weight>o2.weight)
			return 1;
		return 0;
	}
}


class Graph{
	ArrayList<ArrayList<Node>> adj = new ArrayList<>();
	
	Graph(int n){
		for(int i=0;i<n;i++) {
			adj.add(new ArrayList<Node>());
		}
	}
	
	void addDirectedWeightedEdges(int source,int destination,int weight) {
		adj.get(source).add(new Node(destination,weight));
//		adj.get(destination).add(new Node(source,weight));
	}
}

public class dsa {
	
	static int negativeCycle(int[][] edges,int N) {
		int dist[] = new int[N];
		Arrays.fill(dist, Integer.MAX_VALUE);
		dist[0] = 0;
		for(int i=0;i<N-1;i++) {
			for(int cur[] : edges) {
				if(dist[cur[0]]+cur[2] < dist[cur[1]]) {
					dist[cur[1]] = dist[cur[0]]+cur[2];
				}
			}
		}
		int count1=0,count2=0;
		for(int i=0;i<N;i++) {
			count1+=dist[i];
		}
		for(int cur[] : edges) {
			if(dist[cur[0]]+cur[2] < dist[cur[1]]) {
				return 1;
			}
		}
		return 0;
	}
	
	//// take u foward - (youtube)
	
	public static void main(String args[]) {
//		Scanner sc = new Scanner(System.in);
//		int n = 3;
//		Graph g = new Graph(n);
//		for(int i=0;i<2;i++) {
//			int source = sc.nextInt();
//			int destination = sc.nextInt();
//			int weight = sc.nextInt();
//			g.addDirectedWeightedEdges(source, destination,weight);
//		}
		int[][] edges = {{0,1,-1},{1,2,-2},
				{2,0,-3}};
//		int[][] edges = {{0,1,5},{1,5,-3},{1,2,-2},{5,3,1},{3,2,6},{2 ,4 ,3},
//				{3 ,4 ,-2}};
		System.out.println(negativeCycle(edges,3));
	}
}

















