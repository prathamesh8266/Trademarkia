package DSA;
import java.util.*;

class data{
	int val,prev;
	data(int v,int p){
		val = v;
		prev = p;
	}
}

class trees {
	public static void main(String str[]) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the number of Edges: ");
		int edge = sc.nextInt();
		System.out.println("Enter the number of verteces: ");
		int vertice = sc.nextInt();
		ArrayList<ArrayList<Integer>> ar = new ArrayList<>();
		for(int i=0;i<=edge;i++) {
			ar.add(new ArrayList<>());
		}
		for(int i=0;i<vertice;i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			ar.get(a).add(b);
			ar.get(b).add(a);
		}
		System.out.println(cycleDetect(ar));
	}
	
	static boolean cycleDetect(ArrayList<ArrayList<Integer>> ar) {
		boolean vis[] = new boolean[10];
		for(int i=1;i<ar.size();i++) {
			if(!vis[i]) {
				if(cycleDetectUtilDFS(i,ar)){
					return true;
				}
			}
		}
		return false;
	}
	
	static boolean cycleDetectUtilBFS(int node,ArrayList<ArrayList<Integer>> ar) {
		boolean vis[] = new boolean[10];
			Queue<data> q = new LinkedList<>();
			q.offer(new data(node,-1));
			vis[node] = true;
			while(!q.isEmpty()) {
				data top = q.poll();
				for(int i : ar.get(top.val)){
					if(!vis[i]) {
						q.offer(new data(i,top.val));
						vis[i] = true;
					}else if(i != top.prev) {
						return true;
					}
				}
			}
		return false;
	}
	
	static boolean cycleDetectUtilDFS(int node,ArrayList<ArrayList<Integer>> ar) {
		boolean vis[] = new boolean[10];
			Stack<data> s = new Stack<>();
			s.push(new data(node,-1));
			vis[node] = true;
			while(!s.isEmpty()) {
				data top = s.pop();
				for(int i : ar.get(top.val)){
					if(!vis[i]) {
						s.push(new data(i,top.val));
						vis[i] = true;
					}else if(i != top.prev) {
						return true;
					}
				}
			}
		return false;
	}
}
