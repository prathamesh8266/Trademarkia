package DSA;
import java.util.*;

class data{
	int val,col;
	data(int v,int p){
		val = v;
		col = p;
	}
}

class trees {
	public static void main(String str[]) {
		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the number of Edges: ");
		int edge = sc.nextInt();
//		System.out.println("Enter the number of verteces: ");
		int vertice = sc.nextInt();
		ArrayList<ArrayList<Integer>> ar = new ArrayList<>();
		for(int i=0;i<=edge;i++) {
			ar.add(new ArrayList<>());
		}
		for(int i=0;i<vertice;i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			ar.get(a).add(b);
			ar.get(b).add(a);
		}
		System.out.println(bipartite(ar));
	}
	
	
	static boolean bipartite(ArrayList<ArrayList<Integer>> ar) {
		int col[] = new int[10];
		boolean vis[] = new boolean[10];
		Arrays.fill(col, -1);
		for(int i=1;i<ar.size();++i) {
			if(!vis[i]) {
				vis[i] = true;
				col[i] = 0;
				if(!bipartiteUtil(i,ar,col,vis)) {
					return false;
				}
			}
		}
		return true;
	}
	
	static boolean bipartiteUtil(int node,ArrayList<ArrayList<Integer>> ar,
			int col[],boolean vis[]) {
		Stack<data> s = new Stack<>();
		s.push(new data(node,0));
		while(!s.isEmpty()) {
			data top = s.pop();
			for(int i : ar.get(top.val)) {
				if(!vis[i]) {
					vis[i] = true;
					col[i] = comp(top.col);
					s.push(new data(i,comp(top.col)));
				}else if(col[i] == top.col) {
					return false;
				}
			}
		}
		return true;
	}
	
	static int comp(int i) {
		if(i == 1)
			return 0;
		return 1;
	}
}





















