package DSA;
import java.util.*;

class UnDirectedGraph{
	ArrayList<ArrayList<Integer>> ar = new ArrayList<>();
	void construct() {
		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the number of Edges: ");
		int edge = sc.nextInt();
//		System.out.println("Enter the number of vertices: ");
		int vertice = sc.nextInt();
		for(int i=0;i<=edge;i++) {
			ar.add(new ArrayList<>());
		}
		for(int i=0;i<vertice;i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			ar.get(a).add(b);
			ar.get(b).add(a);
		}
	}
}

class DirectedGraph{
	ArrayList<ArrayList<Integer>> ar = new ArrayList<>();
	void construct() {
		Scanner sc = new Scanner(System.in);
//		System.out.println("Enter the number of Edges: ");
		int edge = sc.nextInt();
//		System.out.println("Enter the number of vertices: ");
		int vertice = sc.nextInt();
		for(int i=0;i<=edge;i++) {
			ar.add(new ArrayList<>());
		}
		for(int i=0;i<vertice;i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			ar.get(a).add(b);
		}
	}
}

class trees {
	public static void main(String str[]) {
//		UnDirectedGraph udg = new UnDirectedGraph();
//		udg.construct();
		DirectedGraph dg = new DirectedGraph();
		dg.construct();
		System.out.println(cycleDetect(dg.ar));
	}
	
	static boolean cycleDetect(ArrayList<ArrayList<Integer>> ar) {
		boolean vis[] = new boolean[10];
		for(int i=0;i<ar.size();i++) {
			if(!vis[i]) {
				if(cycleDetectUtil(ar,vis,i)) {
					return true;
				}
			}
		}
		return false;
	}
	
	static boolean cycleDetectUtil(ArrayList<ArrayList<Integer>> ar,boolean vis[],int i) {
		
		vis[i] = true; 
		for(int temp : ar.get(i)) {	
			if(!vis[temp]) {
				vis[temp] = true;
				if(cycleDetectUtil(ar,vis,temp)) {
					return true;
				}
				vis[temp] = false;
			} 
			else {
				return true;
			}
		}
		return false;
	}
}





















