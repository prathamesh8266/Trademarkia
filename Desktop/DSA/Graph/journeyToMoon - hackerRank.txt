package DSA;	
import java.util.*;

class Node{
	int data,weight,maxW=0;
	Node(int d,int wgt){
		data = d;
		weight = wgt;
	}
}

class Graph{
	List<List<Integer>> adj = new ArrayList<>();
	Graph(int number){
		for(int i=0;i<number;i++)
			adj.add(new ArrayList<>());
	}
	
	void addUndirectedEdges(int source,int destination) {
		adj.get(source).add(destination);
//		adj.get(destination).add(new Node(source,weight));
	}
}

public class dsa{
	
	static int dfs(int par[],boolean vis[],List<List<Integer>> astronaut,int node,int counter) {
		Stack<Integer> s = new Stack<>();
		s.push(node);
		while(!s.isEmpty()) {
			int n = s.pop();
			for(int cur : astronaut.get(n)) {
				if(!vis[cur]) {
					vis[cur] = true;
					counter+=1;
					par[cur] = n;
					s.push(cur);
				}
			}
		}
		return counter+1;
	}
	
	public static void journeyToMoon(int n, List<List<Integer>> astronaut) {
	    int par[] = new int[n];
	    Arrays.fill(par, -1);
	    boolean vis[] = new boolean[n];
	    ArrayList<Integer> ar = new ArrayList<>();
	    for(int i=0;i<n;i++) {
	    	if(!vis[i]) {
	    		int counter = 0;
	    		counter = dfs(par,vis,astronaut,i,counter);
	    		ar.add(counter);
	    	}	
	    }
//	    System.out.println(ar);
	    /// total number of possible pair usinf combination are nC2
	    int totalPair = combintaion(n,2);
	    int pairsToMinus = 0;
	    for(int i=0;i<ar.size();i++) {
	    	pairsToMinus += combintaion(ar.get(i),2);
	    }
	    System.out.println(totalPair - pairsToMinus);
	}
	
	static int combintaion(int n,int r) {
		if(n<r) return 0;
		if(n == r) return 1;
		if(r == 1) return n;
		int a=1,b=1,c=1;
		for(int i=n;i>=1;i--) {
			a*=i;
		}
		for(int i=r;i>=1;i--) {
			b*=i;
		}
		for(int i=n-r;i>=1;i--) {
			b*=i;
		}
		return  a/(b*c);
	}
	
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int n = 4;
		Graph g = new Graph(n);
		for(int i=0;i<1;i++) {
			int source = sc.nextInt();
			int destination = sc.nextInt();
//			int weight = sc.nextInt();
			g.addUndirectedEdges(source, destination);
		}				
//		System.out.println(journeyToMoon(n,g.adj));
		journeyToMoon(n,g.adj);
	}
}

















\