package DSA;	
import java.util.*;

public class dsa {	

	public static void main(String args[]) {
		int arr1[] = {1,2,3,4};
		int arr2[] = {1,5,8,9};
        int n = arr1.length; 
        System.out.println(unBounded(arr1,arr2,n,4));
	}


	public static int unBounded(int[] len, int[] price, int n, int rodLen){	
		
		///////////////////////// Recursive approach ////////////////////
		
//		System.out.println(rodLen);
//		if(n == 0 || rodLen == 0)
//			return 0;
//		if(len[n-1]>rodLen)
//			return unBounded(len,price,n-1,rodLen);
//		else {
//			return Math.max(price[n-1]+unBounded(len,price,n,rodLen-len[n-1]), 
//					unBounded(len,price,n-1,rodLen));
		
		////////////////////////////// ITTERATIVE APPROACH ////////////////////
		
		int dp[][] = new int[n+1][rodLen+1];
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<rodLen+1;j++) {
				if(i == 0 || j == 0)
					dp[i][j]=0;
				else if(len[i-1]>j) {
					dp[i][j]=dp[i-1][j];
				}else {
					dp[i][j]=Math.max(price[i-1]+dp[i][j-len[i-1]],dp[i-1][j]);
				}
			}
		}
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<rodLen+1;j++) {
				System.out.print(dp[i][j]+" ");
			}
			System.out.println();
		}
		return dp[n][rodLen];
	}
}	      






























