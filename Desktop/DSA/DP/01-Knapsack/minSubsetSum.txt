package DSA;	
import java.util.*;

public class dsa {	

	public static void main(String args[]) {
		int arr[] = {1,3,7};
        int n = arr.length;
        System.out.print("The minimum difference"
                         + " between two sets is "
                         + findMin(arr, n));
	}
	
		public static int findMinRec(int arr[], int i,int sumCalculated,int sumTotal)
		{
//      as subset1 = subset2 in equal sum partition problem
//		=> subset1 + subset2 = 0 
//		therefore in this we have to minimize the difference between 2 subsets
//		=> |subset1-subset2| = min
//		and also subset1+subset2 = max => subset1 = max - subset2
//		therefore we just have to find the value od subset2 so that
//		we can get answer but putting |(max-subset2)-subset2| = min (answer) 
						
		System.out.println(sumCalculated);
		if (i == 0)
			return Math.abs((sumTotal - sumCalculated)- sumCalculated);
	
		return Math.min(
				findMinRec(arr, i - 1,sumCalculated + arr[i - 1],sumTotal),
				findMinRec(arr, i - 1, sumCalculated,sumTotal));
			
		}
		
		public static int findMin(int arr[], int n)
		{
			int sumTotal = 0;
			for (int i = 0; i < n; i++)
				sumTotal += arr[i];
			return findMinRec(arr, n, 0, sumTotal);
		}
}	      






























