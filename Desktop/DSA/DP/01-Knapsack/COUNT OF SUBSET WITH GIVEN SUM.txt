package DSA;

import java.util.*;

public class dsa {	
	
	public static void main(String args[]) {
	
		 int arr[] = {2,3,5,6,8,10};
		 System.out.println(subSum(arr,arr.length,10));
//		 for(int i=0;i<7;i++) {
//			 for(int j=0;j<=10;j++) {
//				 System.out.print(dp[i][j]+" ");
//			 }
//			 System.out.println();
//		 }
	}
	
	static int dp[][] = new int[100][100];
	
	static int subSum(int[] s,int n,int tot) {
		
		///////////////////////////////// RECURSIVE APPROACH /////////////////
		
//		if(tot == 0) {
//			return 1;
//		}
//		if(n == 0 || tot < 0) {
//			return 0;
//		}
//		if(dp[n][tot]!=0) {    ///////// memozise
//			return dp[n][tot];
//		}
//		if(s[n-1]>tot)
//			return dp[n][tot]=subSum(s,n-1,tot);
//		else
//			return dp[n][tot]=subSum(s,n-1,tot-s[n-1])+subSum(s,n-1,tot);
		
		///////////////////////// ITTERATIVE APPROACH /////////////////////////
		
		int dp[][] = new int[n+1][tot+1];
		for(int i=0;i<n+1;i++) {
			int j = 0;
			dp[i][j] = 1;
		}
		for(int j=1;j<tot+1;j++) {
			int i = 0;
			dp[i][j] = 0;
		}
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<tot+1;j++) {
				if(s[i-1]>j) {
					dp[i][j] = dp[i-1][j];
				}
				else {
					dp[i][j] = dp[i-1][j-s[i-1]]+dp[i-1][j];
				}
			}
		}
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<tot+1;j++) {
				System.out.print(dp[i][j]+" ");
			}
			System.out.println();
		}
		return dp[n][tot];
	}	
	
}
	 






























