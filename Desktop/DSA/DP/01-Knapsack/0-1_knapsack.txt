package DSA;

import java.util.*;

public class dsa {	
	
	public static void main(String args[]) {
	
		 int[] wt = {1,2,3};
		 int[] val = {1,5,3};
		 System.out.println(knapSack(3,wt,val,3));
		
	}
	
//	static int dp[][] = new int[100][100];
	
	static int knapSack(int W,int wt[],int val[],int n) {
		
//		 if (n == 0 || W == 0)			non memozied
//	            return 0;
//	 
//	        // If weight of the nth item is
//	        // more than Knapsack capacity W,
//	        // then this item cannot be included
//	        // in the optimal solution
//	        if (wt[n-1] > W)
//	            return knapSack(W, wt, val, n - 1);
//	 
//	        // Return the maximum of two cases:
//	        // (1) nth item included
//	        // (2) not included
//	        else
//	            return max(val[n-1] + knapSack(W-wt[n-1],wt,val,n-1),
//	                     knapSack(W,wt,val,n-1));
//	                       
	        
//		if(n == wt.length || W == 0)
//			return 0;
////		System.out.println(W); 
//		if(dp[W][n]!=0) //////// memoize
//			return dp[W][n];
//		if(wt[n]>W)
//			return (dp[W][n]=knapSack(W,wt,val,n+1));
//		
//		else
//			return (dp[W][n]=Math.max(val[n]+knapSack(W-wt[n],wt,val,n+1), knapSack(
//				W,wt,val,n+1)));
		
		int K[][] = new int[n+1][W+1];
		int i,w;
		 for (i = 0; i <= n; i++)
	        {
	            for (w = 0; w <= W; w++)
	            {
	                if (i == 0 || w == 0)
	                    K[i][w] = 0;
	                else if (wt[i-1] <= w)
	                    K[i][w] = Math.max(val[i-1] + K[i-1][w-wt[i-1]],
	                         K[i-1][w]);
	                else
	                    K[i][w] = K[i-1][w];
	                for(int a=0;a<n+1;a++) {
	                	for(int b=0;b<W+1;b++) {
	                		System.out.print(K[a][b]+" ");
	                	}
	                	System.out.println();
	                }
	                System.out.println();
	            }
	        }
	 
	        return K[n][W];
	}
}
	 
/////////////////////////////////////////////////////////// OR /////////////////////////////////////////////////////////////////////// 

package DSA;

import java.util.*;

public class dsa {	
	
	public static void main(String args[]) {
	
		 int[] wt = {1,2,3};
		 int[] val = {1,5,3};
		 System.out.println(knapSack(3,wt,val,3));
		
	}
	
	static int dp[][] = new int[100][100];
	
	static int knapSack(int W,int wt[],int val[],int n) {
		
//		if(W==0 ||n==0) {
//			return 0;
//		}
//		if(dp[n][W]!=0) {
//			return dp[n][W];
//		}
//		if(wt[n-1]>W)
//			return dp[n][W] = knapSack(W,wt,val,n-1);
//		else
//			return dp[n][W] = Math.max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),
//					knapSack(W,wt,val,n-1));
		
		int mat[][] = new int[n+1][W+1];
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<W+1;j++) {
				if(i==0 || j == 0)
					mat[i][j] = 0;
				else if(wt[i-1]<= j) {
					mat[i][j]=Math.max(val[i-1]+mat[i-1][j-wt[i-1]],mat[i][j]);
				}else {
					mat[i][j] = mat[i-1][j];
				}
				for(int a=0;a<=n;a++) {
					for(int b=0;b<=W;b++) {
						System.out.print(mat[a][b]+" ");
					}
					System.out.println();
				}
				System.out.println();
			}
		}
		return mat[n][W];
	}
}
	 




























































