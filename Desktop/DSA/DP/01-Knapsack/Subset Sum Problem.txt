package DSA;

import java.util.*;

public class dsa {	
	
	public static void main(String args[]) {
	
		 int subset[] = {1,2,3};
		 System.out.println(subSet(subset,subset.length,6));
		 
	}
	
	static boolean ans = false;
	
	static boolean subSet(int[] s,int n,int sum) {
		System.out.println(sum);
		if(sum == 0 ||  ans == true) 
			return true;
		if(n == 0) 
			return false;	
		
		if(s[n-1]>sum)
			return subSet(s,n-1,sum);
		else
			return subSet(s,n-1,sum-s[n-1]) || subSet(s,n-1,sum);
		
		
//		boolean dp[][] = new boolean[sum+1][s.length+1];
//		for (int i = 0; i <= n; i++)
//            dp[0][i] = true;
// 
//        // If sum is not 0 and set is empty,
//        // then answer is false
//        for (int i = 1; i <= sum; i++)
//            dp[i][0] = false;
//        
//        for (int i = 1; i <= sum; i++) {
//            for (int j = 1; j <= n; j++) {
//                dp[i][j] = dp[i][j - 1];
//                if (i >= s[j - 1])
//                	dp[i][j] = dp[i][j] || dp[i - s[j - 1]][j - 1];
//                                   
//            }
//        }
//        for (int i = 0; i <= sum; i++) {
//	        for (int j = 0; j <= s.length; j++) {
//	            System.out.print(dp[i][j]+" ");
//	        }
//	        System.out.println();
//        } 
//        return dp[sum][n];
	}	
}
	 






























