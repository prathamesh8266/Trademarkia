package DSA;	
import java.util.*;

class Graph{
	LinkedList<Integer> list[];
	Graph(int vertices){
		list = new LinkedList[vertices];
		for(int i=0;i<vertices;i++) {
			list[i] = new LinkedList<Integer>();
		}
	}
	void addUndirectedEdge(int source,int destination) {
		list[source].add(destination);
		list[destination].add(source);
	}
	
	void addDirectedEdge(int source,int destination) {
		list[source].add(destination);
	}
	
	boolean isCyclic() {
		int n = list.length;
		boolean vis[] = new boolean[n];
		for(int i=0;i<n;i++) {
			vis[i]=true;
			for(int num:list[i]) {				
				if(!isCyclicutil(num,vis))
					return false;
				Arrays.fill(vis,false);
			}			
		}
		return true;
	}
	
	ArrayList<String> findPath() {
		int m[][] = {{1, 0, 0, 0},
		         	 {1, 1, 0, 1}, 
		         	 {1, 1, 0, 0},
		         	 {0, 1, 1, 1}};
//		int m[][] = {{1, 0},
//		         {1, 0}};
		boolean vis[][] = {{false,false,false,false},
						   {false,false,false,false},
						   {false,false,false,false},
						   {false,false,false,false}};
//		boolean vis[][] = {{false,false},
//				   {false,false}};
        findPathUtil(m,0,0,"",vis);
        if(ar.size()==0) {
        	ar.add("-1");
        	return ar;
        }
        return ar;
    }
	
	static ArrayList<String> ar = new ArrayList<String>();
	
    void findPathUtil(int[][] m,int i,int j,String s,boolean vis[][]){
    	int n = m.length;
        if(i>=n || j>=n)
             return;
        if(i<0 || j<0)
            return;
        if(i==n-1 && j==n-1) {
        	ar.add(s);
            return;
        }
        if(i+1<n && !vis[i+1][j] && m[i+1][j] == 1) {
        	vis[i][j] = true;
        	 findPathUtil(m,i+1,j,s+"D",vis);
        	 vis[i][j] = false;
        }
        if(j-1>=0 && !vis[i][j-1] && m[i][j-1] == 1) {
        	vis[i][j] = true;
        	 findPathUtil(m,i,j-1,s+"L",vis);
        	 vis[i][j] = false;
        }
        if(j+1<n && !vis[i][j+1] && m[i][j+1] == 1) {
        	vis[i][j] = true;
        	 findPathUtil(m,i,j+1,s+"R",vis);
        	 vis[i][j] = false;
        }
        if( i-1>=0 && !vis[i-1][j] && m[i-1][j] == 1) {
        	vis[i][j] = true;
        	 findPathUtil(m,i-1,j,s+"U",vis);
        	 vis[i][j] = false;
        }
        return;
    }
}

public class dsa {	
	
	public static void main(String args[]) {
//		Scanner sc = new Scanner(System.in);
		int n = 4;
		Graph g = new Graph(n);
//		int n1 = 6;
//		for(int i=0;i<n1;i++) {
//			int src = sc.nextInt();
//			int dest = sc.nextInt();
//			g.addDirectedEdge(src,dest);
//		}
		System.out.println(g.findPath());
	}
}



























