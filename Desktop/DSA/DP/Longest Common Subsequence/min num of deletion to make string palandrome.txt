package DSA;	
import java.util.*;

public class dsa {	

	public static void main(String args[]) {

		String s1 = "abappleba";
		String s2 = "";
		for(int i=s1.length()-1;i>=0;i--) {
			s2 += s1.charAt(i);
		}
		System.out.println(s2);
		int n = s1.length();
		int m = s2.length();
		int dp[][] = new int[n+1][m+1];
		int common = LPSubSeq(s1,s2,s1.length(),s1.length(),dp);
		System.out.println("Deletion : "+(s1.length()-common));
	}
	
	static int LPSubSeq(String s1,String s2,int n,int m,int[][] dp){
		
		/////////////////////////////////// RECURSIVE APPROACH //////////////////
		
//		System.out.println(start+" "+end);
//		if(n == 0 || m == 0)
//			return 0;
//		
//		if(s1.charAt(n-1)==s2.charAt(m-1))
//			return dp[n][m] = 1+LPSubSeq(s1,s2,n-1,m-1,dp);
//		
//		return dp[n][m] = Math.max(LPSubSeq(s1,s2,n-1,m,dp), LPSubSeq(s1,s2,n,m-1,dp));
//		
		////////////////////////////////// ITERATIVE APPROACH ////////////////////
		
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<m+1;j++) {
				if(s1.charAt(i-1)==s2.charAt(j-1))
					dp[i][j] = 1+dp[i-1][j-1];
				else
					dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
					
			}
		}
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<m+1;j++) {
				System.out.print(dp[i][j]+" ");
			}
			System.out.println();
		}
		return dp[n][m];
	}
}
	










