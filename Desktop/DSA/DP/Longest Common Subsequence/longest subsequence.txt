package DSA;	
import java.util.*;

public class dsa {	

	public static void main(String args[]) {

		String s1 = "aabebcdd";
		String s2 = s1;
		int n = s1.length();
		int m = s2.length();
		int dp[][] = new int[n+1][m+1];
		System.out.println(subseq(s1,s2,n,m,dp));
	}
	
	static int subseq(String s1,String s2,int n,int m,int[][] dp) {
		
		///////////////////////////////// RECURSIVE APPROACH ///////////////////////
		
//		if(n == 0 || m == 0)
//			return 0;
//		
//		if((s2.charAt(m-1)==s1.charAt(n-1))&& n!=m)
//			return 1+subseq(s1,s2,n-1,m-1);
//		
//		return Math.max(subseq(s1,s2,n-1,m), subseq(s1,s2,n,m-1));
		
		//////////////////////////////// ITERATIVE APPROACH /////////////////////////
		
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<m+1;j++) {
				if((s1.charAt(i-1)==s2.charAt(j-1))&& i!=j)
					dp[i][j] = 1+dp[i-1][j-1];
				else
					dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
			}
		}
		for(int i=0;i<n+1;i++) {
			for(int j=0;j<m+1;j++) {
				System.out.print(dp[i][j]+" ");
			}
			System.out.println();
		}
		
		return dp[n][m];
	}
}
	








