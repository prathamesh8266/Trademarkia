package DSA;	
import java.util.*;

public class dsa {	

	public static void main(String args[]) {

		String s1 = "abcdgh";
		String s2 = "abedfr";
		int n = s1.length();
		int m = s2.length();
		int dp[][] = new int[n+1][m+1];
        System.out.println(lcs(s1,s2,s1.length(),s2.length(),dp));
//        for(int i=0;i<n+1;i++) {
//        	for(int j=0;j<m+1;j++) {
//        		System.out.print(dp[i][j]+" ");
//        	}
//        	System.out.println();
//        }
	}
	
	private static int lcs(String s1,String s2,int n,int m,int dp[][]){
		
		//////////////////////////////////// RECURSIVE APROACH //////////////////////
		
//		if(n == 0 || m == 0)
//			return 0;
//		
//		if(s1.charAt(n-1) == s2.charAt(m-1))
//			return dp[n][m] = 1+lcs(s1,s2,n-1,m-1,dp);
//		else {
//			return dp[n][m] = Math.max(lcs(s1,s2,n-1,m,dp),lcs(s1,s2,n,m-1,dp));
//		}
		
		//////////////////////////////// ITTERATIVE APPROACH /////////////////////////
		
		int dp1[][] = new int[n+1][m+1];
		for(int i=1;i<n+1;i++) {
			for(int j=1;j<m+1;j++) {
				if(s1.charAt(i-1)==s2.charAt(j-1))
					dp1[i][j] = 1+dp1[i-1][j-1];
				else {
					dp1[i][j] = Math.max(dp1[i-1][j], dp1[i][j-1]);
				}
			}
		}
		 for(int i=0;i<n+1;i++) {
	        	for(int j=0;j<m+1;j++) {
	        		System.out.print(dp1[i][j]+" ");
	        	}
	        	System.out.println();
	       }
		return dp1[n][m];
	}
}
	










