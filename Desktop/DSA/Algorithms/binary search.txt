package test;

import java.util.*;

// https://leetcode.com/problems/first-bad-version/solution/

public class Test {		
    public static void main(String args[])
    {
    	int num[] = {2,5};
    	System.out.println(search(num,0));
    }
    
//    static  public int search(int[] nums, int target) {
//        
//    	if(nums.length == 1 && nums[0] == target) {
//    		return 0;
//    	}
//    	int i = 0;
//    	int j = nums.length-1;
//    	while(i<j) {
//    		System.out.println(i+" "+j);
//    		int mid = (i+j)/2;
//    		if(nums[i] == target) {
//    			return i;
//    		}
//    		if(nums[mid] == target) {
//    			return mid;
//    		}
//    		if(nums[j] == target) {
//    			return j;
//    		}
//    		if(nums[mid]<target) {
//    			i = mid+1;
//    			continue;
//    		}
//    		if(nums[mid]>target) {
//    			j = mid-1;
//    		}
//    	}
//    	System.out.println(i+" "+j);
//    	return -1;
//    }
    
    static  public int search(int[] nums, int target) {
    	int start = 0;
    	int end = nums.length-1;
    	return searchUtil(nums,start,(start+end)/2,end,target);
    }
    
    static int searchUtil(int[] nums,int start,int mid,int end,int target) {
	    	if(nums[start] == target)
	    		return start;
	    	if(nums[end] == target)
	    		return end;
	    	if(nums[mid] == target)
	    		return mid;
	    	if(start >= end)
	    		return -1;
	    	if(nums[mid]<target) {
	    		int curMid = start+(end-start)/2;
	    		if(mid+1 <= nums.length-1)
	    			return searchUtil(nums,mid+1,curMid,end,target);
	    	}
	    	if(nums[mid]>target) {
	    		int curMid = (start+end) >>> 1;
	    		if(mid-1>=0)
	    			return searchUtil(nums,start,curMid,mid-1,target);
	    	}
	    	return -1;
    }
}
	