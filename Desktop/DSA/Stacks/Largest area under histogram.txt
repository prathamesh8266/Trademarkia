package test;

import java.util.*;

public class Test {		
    public static void main(String args[]){
    	
    	int arr[] = {3,2,1};
    	int n = 7;
    	System.out.println(largestRectangleArea(arr));
    }
    
    static class Data{
    	int data,index;
    	Data(int d,int i){
    		data = d;
    		index = i;
    	}
    }
    
    public static int largestRectangleArea(int[] heights) {
        
    	Stack<Data> s = new Stack<>();
    	int i = 0;
    	int len = heights.length;
    	int preProcess1[] = new int[heights.length];
    	int preProcess2[] = new int[heights.length];
    	/////////// left preProcessing ////////////////
    	while(i < len) {
    		while(!s.isEmpty()) {
    			Data top = s.peek();
    			if(top.data < heights[i]) {
    				s.push(new Data(heights[i],i));
    				preProcess1[i] = top.index ;
    				break;
    			}else {
    				s.pop();
    			}
    		}
    		if(s.isEmpty()) {
    			preProcess1[i] = -1;
    			s.push(new Data(heights[i],i));
    		}
    		i++;
    	}
//    	for(int i1:preProcess1) {	
//    		System.out.print(i1+" ");
//    	}
    	while(!s.isEmpty()) s.pop();
    	//////////// Right preProcessing //////////////////
    	i = heights.length-1;
    	while(i>=0) {
    		while(!s.isEmpty()) {
    			Data top = s.peek();
    			if(top.data < heights[i]) {
    				s.push(new Data(heights[i],i));
    				preProcess2[i] = top.index;
    				break;
    			}else {
    				s.pop();
    			}
    		}
    		if(s.isEmpty()) {
    			preProcess2[i] = len;
    			s.push(new Data(heights[i],i));
    		}
    		i--;
    	}
//    	System.out.println();
//    	for(int i1:preProcess2) {	
//    		System.out.print(i1+" ");
//    	}
    	int max = Integer.MIN_VALUE;
    	for(int i1=0;i1<len;i1++) {
    		preProcess1[i1] = (preProcess2[i1]-(preProcess1[i1]+1))*heights[i1]; 
    		max = Math.max(max, preProcess1[i1]);
    	}
//    	for(int i1:preProcess1) {	
//    		System.out.print(i1+" ");
//    	}
    	return max;
    }

}
	












































