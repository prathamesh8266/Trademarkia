package DSA;

import java.util.HashMap;
import java.util.HashSet;

public class dsa {	
	
	static class Node{
		int data;
		Node next;
		Node(int d){			
			data = d;
			next = null;
		}
	}
	static class linkedList{
		Node head;
		void hardCode() {
			head = new Node(1);
			head.next = new Node(3);
			Node temp = head.next;
			head.next.next = new Node(4);
			head.next.next.next = temp;
		}
		void print() {
			Node temp = head;
			while(temp!=null) {
				System.out.print(temp.data+" ");
				temp = temp.next;
			}
		}
	}
	
	 public static void main(String[] args){
		linkedList ll = new linkedList();
		ll.hardCode();
		System.out.println(detectLoop(ll.head));
//		ll.print();
	 }
	 
	 public static boolean detectLoop(Node head){
//	        HashSet<Node> set = new HashSet<>();
//	        Node temp = head;
//	        while(temp!=null) {
//	        	if(set.contains(temp)) {
//	        		return true;
//	        	}
//	        	else {
//	        		set.add(temp);
//	        	}
//	        	temp = temp.next;
//	        }
//	        return false;
		 Node slowPointer = head;
		 Node fastPointer = head;
		 while(fastPointer!=null) {
			fastPointer = fastPointer.next;
				if(fastPointer != null){
					fastPointer = fastPointer.next;
					slowPointer = slowPointer.next;
				}
				if(fastPointer == slowPointer){
					return true; 
				}
		 }
		 return false;
	 }
}	      






























