package DSA;	
import java.util.*;

//class numAnsBit{
//	int num;
//	int setBit = 0;
//	List<Integer> li = new LinkedList<>();
//	void bits() {
//		int n = num;
//		while(n>0) {
//			li.add(n%2);
//			n/=2;
//		}
//	}
//	void countBits() {
//		for(int i=0;i<li.size();i++) {
//			if(li.get(i)==1) {
//				setBit++;
//			}
//		}
//	}
//	numAnsBit(int n){
//		num = n;
//		bits();
//		countBits();
//	}
//}

//class comp implements Comparator<numAnsBit>{
//	@Override
//	public int compare(numAnsBit o1, numAnsBit o2) {
//		 return o2.setBit-o1.setBit;
//	}
//}

public class dsa {
	
	public static void main (String[] args) {	
		sortBySetBitCount(new Integer[] {3,1,5},3);
	} 
	public static void sortBySetBitCount(Integer arr[], int n) {
//		List<numAnsBit> li = new ArrayList<>();
//		Comparator<numAnsBit> c = new comp();
//		for(int i=0;i<n;i++) {
//			li.add(new numAnsBit(arr[i]));
//		}
//		Collections.sort(li,c);
//		for(int i=0;i<li.size();i++) {
//			arr[i] = (li.get(i).num);
//			System.out.println(li.get(i).num);
//		}
		Arrays.sort(arr, new Comparator<Integer>() {
	            @Override
	            public int compare(Integer arg0, Integer arg1)
	            {
	                // TODO Auto-generated method stub
	                int c1 = Integer.bitCount(arg0);
	                int c2 = Integer.bitCount(arg1);
	                if (c1 <= c2)
	                    return 1;
	                else
	                    return -1;
	            }
	        });
		for(int i=0;i<arr.length;i++) {
			System.out.println(arr[i]);
		}
	}
}































